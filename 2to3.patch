--- ./Notes/addLicenseOneFile.py	(original)
+++ ./Notes/addLicenseOneFile.py	(refactored)
@@ -3,10 +3,10 @@
 import sys
 
 if len(sys.argv) !=5 and len(sys.argv) !=4:
-    print >> sys.stderr, "Usage:", sys.argv[0], "<license file> <file> <start delimiter> [end delimiter]"
+    print("Usage:", sys.argv[0], "<license file> <file> <start delimiter> [end delimiter]", file=sys.stderr)
     sys.exit(1)
 
-print "Adding license IN-PLACE:", sys.argv[1:]
+print("Adding license IN-PLACE:", sys.argv[1:])
 
 
 lineprefix = ' '
@@ -37,15 +37,15 @@
 f.close()
 for line in flines:
     if "copyright" in line.lower():
-        print "Error: file already contain license: ", line,
-        print "Skip: ", sys.argv[2]
+        print("Error: file already contain license: ", line, end=' ')
+        print("Skip: ", sys.argv[2])
         sys.exit(1)
 
 f = open(sys.argv[2], 'w')
 for line in lines:
-    print >> f, line,
+    print(line, end=' ', file=f)
 for line in flines:
-    print >> f, line,
+    print(line, end=' ', file=f)
 
-print "Done. See file:", sys.argv[2]
+print("Done. See file:", sys.argv[2])
 
--- ./Notes/addLicenseOneShell.py	(original)
+++ ./Notes/addLicenseOneShell.py	(refactored)
@@ -3,10 +3,10 @@
 import sys
 
 if len(sys.argv) !=5 and len(sys.argv) !=4:
-    print >> sys.stderr, "Usage:", sys.argv[0], "<license file> <file> <start delimiter> [end delimiter]"
+    print("Usage:", sys.argv[0], "<license file> <file> <start delimiter> [end delimiter]", file=sys.stderr)
     sys.exit(1)
 
-print "Adding license IN-PLACE:", sys.argv[1:]
+print("Adding license IN-PLACE:", sys.argv[1:])
 
 # also, maintain the first line if it starts with '#!'
 
@@ -38,20 +38,20 @@
 f.close()
 for line in flines:
     if "copyright" in line.lower():
-        print "Error: file already contain license: ", line,
-        print "Skip: ", sys.argv[2]
+        print("Error: file already contain license: ", line, end=' ')
+        print("Skip: ", sys.argv[2])
         sys.exit(1)
 
 f = open(sys.argv[2], 'w')
 # maintain the first line if it is '#!'
 if len(flines)>0:
    if flines[0].startswith('#!'):
-      print >> f, flines[0]
+      print(flines[0], file=f)
       flines = flines[1:]
 for line in lines:
-    print >> f, line,
+    print(line, end=' ', file=f)
 for line in flines:
-    print >> f, line,
+    print(line, end=' ', file=f)
 
-print "Done. See file:", sys.argv[2]
+print("Done. See file:", sys.argv[2])
 
--- ./src/ptgen/YaccLexer.py	(original)
+++ ./src/ptgen/YaccLexer.py	(refactored)
@@ -68,68 +68,68 @@
                             la1 = self.LA(1)
                             if False:
                                 pass
-                            elif la1 and la1 in u':':
+                            elif la1 and la1 in ':':
                                 pass
                                 self.mCOLON(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u';':
+                            elif la1 and la1 in ';':
                                 pass
                                 self.mSEMICOLON(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'-':
+                            elif la1 and la1 in '-':
                                 pass
                                 self.mHYPHEN(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'^':
+                            elif la1 and la1 in '^':
                                 pass
                                 self.mCARROT(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'!':
+                            elif la1 and la1 in '!':
                                 pass
                                 self.mBANG(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'|':
+                            elif la1 and la1 in '|':
                                 pass
                                 self.mOR(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'0123456789':
+                            elif la1 and la1 in '0123456789':
                                 pass
                                 self.mUINT(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'\'':
+                            elif la1 and la1 in '\'':
                                 pass
                                 self.mCHAR(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'"':
+                            elif la1 and la1 in '"':
                                 pass
                                 self.mSTRING(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'{':
+                            elif la1 and la1 in '{':
                                 pass
                                 self.mACTION(True)
                                 theRetToken = self._returnToken
-                            elif la1 and la1 in u'\t\n\r ':
+                            elif la1 and la1 in '\t\n\r ':
                                 pass
                                 self.mWS(True)
                                 theRetToken = self._returnToken
                             else:
-                                if (self.LA(1)==u'e') and (self.LA(2)==u'r') and (self.LA(3)==u'r') and (self.LA(4)==u'o') and (self.LA(5)==u'r') and (True) and (True):
+                                if (self.LA(1)=='e') and (self.LA(2)=='r') and (self.LA(3)=='r') and (self.LA(4)=='o') and (self.LA(5)=='r') and (True) and (True):
                                     pass
                                     self.mERROR(True)
                                     theRetToken = self._returnToken
-                                elif (self.LA(1)==u'%') and (self.LA(2)==u'p'):
+                                elif (self.LA(1)=='%') and (self.LA(2)=='p'):
                                     pass
                                     self.mPREC(True)
                                     theRetToken = self._returnToken
-                                elif (self.LA(1)==u'%') and (self.LA(2)==u'd'):
+                                elif (self.LA(1)=='%') and (self.LA(2)=='d'):
                                     pass
                                     self.mDPREC(True)
                                     theRetToken = self._returnToken
-                                elif (self.LA(1)==u'/') and (self.LA(2)==u'/'):
+                                elif (self.LA(1)=='/') and (self.LA(2)=='/'):
                                     pass
                                     self.mSL_COMMENT(True)
                                     theRetToken = self._returnToken
-                                elif (self.LA(1)==u'/') and (self.LA(2)==u'*'):
+                                elif (self.LA(1)=='/') and (self.LA(2)=='*'):
                                     pass
                                     self.mML_COMMENT(True)
                                     theRetToken = self._returnToken
@@ -147,10 +147,10 @@
                             ### return token to caller
                             return self._returnToken
                         ### handle lexical errors ....
-                        except antlr.RecognitionException, e:
+                        except antlr.RecognitionException as e:
                             raise antlr.TokenStreamRecognitionException(e)
                     ### handle char stream errors ...
-                    except antlr.CharStreamException,cse:
+                    except antlr.CharStreamException as cse:
                         if isinstance(cse, antlr.CharStreamIOException):
                             raise antlr.TokenStreamIOException(cse.io)
                         else:
@@ -260,16 +260,16 @@
             la1 = self.LA(1)
             if False:
                 pass
-            elif la1 and la1 in u'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz':
+            elif la1 and la1 in 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz':
                 pass
                 self.mLETTER(False)
-            elif la1 and la1 in u'0123456789':
+            elif la1 and la1 in '0123456789':
                 pass
                 self.mDIGIT(False)
-            elif la1 and la1 in u'_':
+            elif la1 and la1 in '_':
                 pass
                 self.match('_')
-            elif la1 and la1 in u'.':
+            elif la1 and la1 in '.':
                 pass
                 self.match('.')
             else:
@@ -287,12 +287,12 @@
         la1 = self.LA(1)
         if False:
             pass
-        elif la1 and la1 in u'abcdefghijklmnopqrstuvwxyz':
-            pass
-            self.matchRange(u'a', u'z')
-        elif la1 and la1 in u'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
-            pass
-            self.matchRange(u'A', u'Z')
+        elif la1 and la1 in 'abcdefghijklmnopqrstuvwxyz':
+            pass
+            self.matchRange('a', 'z')
+        elif la1 and la1 in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
+            pass
+            self.matchRange('A', 'Z')
         else:
                 self.raise_NoViableAlt(self.LA(1))
             
@@ -306,7 +306,7 @@
         _saveIndex = 0
         pass
         pass
-        self.matchRange(u'0', u'9')
+        self.matchRange('0', '9')
         self.set_return_token(_createToken, _token, _ttype, _begin)
     
     def mUINT(self, _createToken):    
@@ -318,7 +318,7 @@
         pass
         _cnt33= 0
         while True:
-            if ((self.LA(1) >= u'0' and self.LA(1) <= u'9')):
+            if ((self.LA(1) >= '0' and self.LA(1) <= '9')):
                 pass
                 self.mDIGIT(False)
             else:
@@ -340,12 +340,12 @@
         la1 = self.LA(1)
         if False:
             pass
-        elif la1 and la1 in u'\\':
+        elif la1 and la1 in '\\':
             pass
             pass
             self.match('\\')
             self.matchNot(antlr.EOF_CHAR)
-        elif la1 and la1 in u'\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f':
+        elif la1 and la1 in '\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f':
             pass
             pass
             self.match(_tokenSet_1)
@@ -433,13 +433,13 @@
         la1 = self.LA(1)
         if False:
             pass
-        elif la1 and la1 in u'\n':
+        elif la1 and la1 in '\n':
             pass
             self.match('\n')
-        elif la1 and la1 in u'\r':
+        elif la1 and la1 in '\r':
             pass
             self.match('\r')
-            if (self.LA(1)==u'\n'):
+            if (self.LA(1)=='\n'):
                 pass
                 self.match('\n')
             else: ## <m4>
@@ -464,23 +464,23 @@
             la1 = self.LA(1)
             if False:
                 pass
-            elif la1 and la1 in u'\n':
+            elif la1 and la1 in '\n':
                 pass
                 self.match('\n')
                 self.newline();
-            elif la1 and la1 in u'\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\u000b\u000c\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&\'()+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f':
+            elif la1 and la1 in '\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\u000b\u000c\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !"#$%&\'()+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f':
                 pass
                 self.match(_tokenSet_4)
             else:
-                if (self.LA(1)==u'\r') and (self.LA(2)==u'\n') and ((self.LA(3) >= u'\u0000' and self.LA(3) <= u'\u007f')) and ((self.LA(4) >= u'\u0000' and self.LA(4) <= u'\u007f')) and (True) and (True) and (True):
+                if (self.LA(1)=='\r') and (self.LA(2)=='\n') and ((self.LA(3) >= '\u0000' and self.LA(3) <= '\u007f')) and ((self.LA(4) >= '\u0000' and self.LA(4) <= '\u007f')) and (True) and (True) and (True):
                     pass
                     self.match('\r')
                     self.match('\n')
                     self.newline();
-                elif ((self.LA(1)==u'*') and ((self.LA(2) >= u'\u0000' and self.LA(2) <= u'\u007f')) and ((self.LA(3) >= u'\u0000' and self.LA(3) <= u'\u007f')) and ( self.LA(2)!='/' )):
+                elif ((self.LA(1)=='*') and ((self.LA(2) >= '\u0000' and self.LA(2) <= '\u007f')) and ((self.LA(3) >= '\u0000' and self.LA(3) <= '\u007f')) and ( self.LA(2)!='/' )):
                     pass
                     self.match('*')
-                elif (self.LA(1)==u'\r') and ((self.LA(2) >= u'\u0000' and self.LA(2) <= u'\u007f')) and ((self.LA(3) >= u'\u0000' and self.LA(3) <= u'\u007f')) and (True) and (True) and (True) and (True):
+                elif (self.LA(1)=='\r') and ((self.LA(2) >= '\u0000' and self.LA(2) <= '\u007f')) and ((self.LA(3) >= '\u0000' and self.LA(3) <= '\u007f')) and (True) and (True) and (True) and (True):
                     pass
                     self.match('\r')
                     self.newline();
@@ -503,19 +503,19 @@
             la1 = self.LA(1)
             if False:
                 pass
-            elif la1 and la1 in u' ':
+            elif la1 and la1 in ' ':
                 pass
                 self.match(' ')
-            elif la1 and la1 in u'\r':
+            elif la1 and la1 in '\r':
                 pass
                 self.match('\r')
                 self.match('\n')
                 self.newline()
-            elif la1 and la1 in u'\n':
+            elif la1 and la1 in '\n':
                 pass
                 self.match('\n')
                 self.newline()
-            elif la1 and la1 in u'\t':
+            elif la1 and la1 in '\t':
                 pass
                 self.match('\t')
             else:
@@ -532,35 +532,35 @@
 ### generate bit set
 def mk_tokenSet_0(): 
     ### var1
-    data = [ 0L, 576460743847706622L, 0L, 0L]
+    data = [ 0, 576460743847706622, 0, 0]
     return data
 _tokenSet_0 = antlr.BitSet(mk_tokenSet_0())
 
 ### generate bit set
 def mk_tokenSet_1(): 
     ### var1
-    data = [ -549755813889L, -268435457L, 0L, 0L]
+    data = [ -549755813889, -268435457, 0, 0]
     return data
 _tokenSet_1 = antlr.BitSet(mk_tokenSet_1())
 
 ### generate bit set
 def mk_tokenSet_2(): 
     ### var1
-    data = [ -17179869185L, -1L, 0L, 0L]
+    data = [ -17179869185, -1, 0, 0]
     return data
 _tokenSet_2 = antlr.BitSet(mk_tokenSet_2())
 
 ### generate bit set
 def mk_tokenSet_3(): 
     ### var1
-    data = [ -9217L, -1L, 0L, 0L]
+    data = [ -9217, -1, 0, 0]
     return data
 _tokenSet_3 = antlr.BitSet(mk_tokenSet_3())
 
 ### generate bit set
 def mk_tokenSet_4(): 
     ### var1
-    data = [ -4398046520321L, -1L, 0L, 0L]
+    data = [ -4398046520321, -1, 0, 0]
     return data
 _tokenSet_4 = antlr.BitSet(mk_tokenSet_4())
     
@@ -573,8 +573,8 @@
     ### create lexer - shall read from stdin
     try:
         for token in YaccLexer.Lexer():
-            print token
-            
-    except antlr.TokenStreamException, e:
-        print "error: exception caught while lexing: ", e
+            print(token)
+            
+    except antlr.TokenStreamException as e:
+        print("error: exception caught while lexing: ", e)
 ### __main__ header action <<< 
--- ./src/ptgen/YaccParser.py	(original)
+++ ./src/ptgen/YaccParser.py	(refactored)
@@ -194,7 +194,7 @@
                     raise antlr.NoViableAltException(self.LT(1), self.getFilename())
                 
         
-        except antlr.RecognitionException, ex:
+        except antlr.RecognitionException as ex:
             self.reportError(ex)
             self.consume()
             self.consumeUntil(_tokenSet_2)
@@ -206,7 +206,7 @@
             pass
             self.match(HYPHEN)
         
-        except antlr.RecognitionException, ex:
+        except antlr.RecognitionException as ex:
             self.reportError(ex)
             self.consume()
             self.consumeUntil(_tokenSet_0)
@@ -228,7 +228,7 @@
                     raise antlr.NoViableAltException(self.LT(1), self.getFilename())
                 
         
-        except antlr.RecognitionException, ex:
+        except antlr.RecognitionException as ex:
             self.reportError(ex)
             self.consume()
             self.consumeUntil(_tokenSet_0)
@@ -265,21 +265,21 @@
 ### generate bit set
 def mk_tokenSet_0(): 
     ### var1
-    data = [ 2L, 0L]
+    data = [ 2, 0]
     return data
 _tokenSet_0 = antlr.BitSet(mk_tokenSet_0())
 
 ### generate bit set
 def mk_tokenSet_1(): 
     ### var1
-    data = [ 18L, 0L]
+    data = [ 18, 0]
     return data
 _tokenSet_1 = antlr.BitSet(mk_tokenSet_1())
 
 ### generate bit set
 def mk_tokenSet_2(): 
     ### var1
-    data = [ 64L, 0L]
+    data = [ 64, 0]
     return data
 _tokenSet_2 = antlr.BitSet(mk_tokenSet_2())
     
--- ./src/ptgen/antlr.py	(original)
+++ ./src/ptgen/antlr.py	(refactored)
@@ -45,7 +45,7 @@
 
 def error(fmt,*args):
     if fmt:
-        print "error: ", fmt % tuple(args)
+        print("error: ", fmt % tuple(args))
 
 def ifelse(cond,_then,_else):
     if cond :
@@ -55,7 +55,7 @@
     return r
 
 def is_string_type(x):
-    return  (isinstance(x,str) or isinstance(x,unicode))
+    return  (isinstance(x,str) or isinstance(x,str))
 
 def assert_string_type(x):
     assert is_string_type(x)
@@ -549,9 +549,9 @@
 Token.badToken = Token( type=INVALID_TYPE, text="<no text>")
 
 if __name__ == "__main__":
-    print "testing .."
+    print("testing ..")
     T = Token.badToken
-    print T
+    print(T)
 
 ###xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx###
 ###                       CommonToken                              ###
@@ -622,16 +622,16 @@
 
 if __name__ == '__main__' :
     T = CommonToken()
-    print T
+    print(T)
     T = CommonToken(col=15,line=1,text="some text", type=5)
-    print T
+    print(T)
     T = CommonToken()
     T.setLine(1).setColumn(15).setText("some text").setType(5)
-    print T
-    print T.getLine()
-    print T.getColumn()
-    print T.getText()
-    print T.getType()
+    print(T)
+    print(T.getLine())
+    print(T.getColumn())
+    print(T.getText())
+    print(T.getType())
 
 ###xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx###
 ###                    CommonHiddenStreamToken                     ###
@@ -811,7 +811,7 @@
 
                 ### use unicode chars instead of ASCII ..
                 self.queue.append(c)
-        except Exception,e:
+        except Exception as e:
             raise CharStreamIOException(e)
         ##except: # (mk) Cannot happen ...
             ##error ("unexpected exception caught ..")
@@ -866,7 +866,7 @@
             return
         raise TypeError("TokenStreamIterator requires TokenStream object")
 
-    def next(self):
+    def __next__(self):
         assert self.inst
         item = self.inst.nextToken()
         if not item or item.isEOF():
@@ -901,7 +901,7 @@
         while 1:
             try:
                 return self._input.nextToken()
-            except TokenStreamRetryException,r:
+            except TokenStreamRetryException as r:
                 ### just retry "forever"
                 pass
 
@@ -1342,23 +1342,23 @@
         self.setColumn(nc)
 
     def panic(self,s='') :
-        print "CharScanner: panic: " + s
+        print("CharScanner: panic: " + s)
         sys.exit(1)
 
     def reportError(self,ex) :
-        print ex
+        print(ex)
 
     def reportError(self,s) :
         if not self.getFilename():
-            print "error: " + str(s)
-        else:
-            print self.getFilename() + ": error: " + str(s)
+            print("error: " + str(s))
+        else:
+            print(self.getFilename() + ": error: " + str(s))
 
     def reportWarning(self,s) :
         if not self.getFilename():
-            print "warning: " + str(s)
-        else:
-            print self.getFilename() + ": warning: " + str(s)
+            print("warning: " + str(s))
+        else:
+            print(self.getFilename() + ": warning: " + str(s))
 
     def resetText(self) :
         self.text.setLength(0)
@@ -1418,16 +1418,16 @@
         return c.__class__.lower()
 
     def traceIndent(self):
-        print ' ' * self.traceDepth
+        print(' ' * self.traceDepth)
 
     def traceIn(self,rname):
         self.traceDepth += 1
         self.traceIndent()
-        print "> lexer %s c== %s" % (rname,self.LA(1))
+        print("> lexer %s c== %s" % (rname,self.LA(1)))
 
     def traceOut(self,rname):
         self.traceIndent()
-        print "< lexer %s c== %s" % (rname,self.LA(1))
+        print("< lexer %s c== %s" % (rname,self.LA(1)))
         self.traceDepth -= 1
 
     def uponEOF(self):
@@ -1491,8 +1491,8 @@
             try:
                 func=args[0]
                 args=args[1:]
-                apply(func,args)
-            except RecognitionException, e:
+                func(*args)
+            except RecognitionException as e:
                 ## catastrophic failure
                 self.reportError(e);
                 self.consume();
@@ -1525,7 +1525,7 @@
             return
         raise TypeError("CharScannerIterator requires CharScanner object")
 
-    def next(self):
+    def __next__(self):
         assert self.inst
         item = self.inst.nextToken()
         if not item or item.isEOF():
@@ -1548,19 +1548,19 @@
 
     def __init__(self,data=None):
         if not data:
-            BitSet.__init__(self,[long(0)])
+            BitSet.__init__(self,[int(0)])
             return
         if isinstance(data,int):
-            BitSet.__init__(self,[long(data)])
-            return
-        if isinstance(data,long):
+            BitSet.__init__(self,[int(data)])
+            return
+        if isinstance(data,int):
             BitSet.__init__(self,[data])
             return
         if not isinstance(data,list):
             raise TypeError("BitSet requires integer, long, or " +
                             "list argument")
         for x in data:
-            if not isinstance(x,long):
+            if not isinstance(x,int):
                 raise TypeError(self,"List argument item is " +
                                 "not a long: %s" % (x))
         self.data = data
@@ -1568,7 +1568,7 @@
     def __str__(self):
         bits = len(self.data) * BitSet.BITS
         s = ""
-        for i in xrange(0,bits):
+        for i in range(0,bits):
             if self.at(i):
                 s += "1"
             else:
@@ -1607,7 +1607,7 @@
 
     def bitMask(self,bit):
         pos = bit & BitSet.MOD_MASK  ## bit mod BITS
-        return (1L << pos)
+        return (1 << pos)
 
     def set(self,bit,on=True):
         # grow bitset as required (use with care!)
@@ -1615,8 +1615,8 @@
         mask = self.bitMask(bit)
         if i>=len(self.data):
             d = i - len(self.data) + 1
-            for x in xrange(0,d):
-                self.data.append(0L)
+            for x in range(0,d):
+                self.data.append(0)
             assert len(self.data) == i+1
         if on:
             self.data[i] |=  mask
@@ -1643,12 +1643,12 @@
 def illegalarg_ex(func):
     raise ValueError(
        "%s is only valid if parser is built for debugging" %
-       (func.func_name))
+       (func.__name__))
 
 def runtime_ex(func):
     raise RuntimeException(
        "%s is only valid if parser is built for debugging" %
-       (func.func_name))
+       (func.__name__))
 
 ###xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx###
 ###                       TokenBuffer                              ###
@@ -1908,16 +1908,16 @@
             col  = x.getLine()
             text = x.getText()
             fmt  = fmt + 'unexpected symbol at line %s (column %s) : "%s"'
-            print >>sys.stderr, fmt % (line,col,text)
-        else:
-            print >>sys.stderr, fmt,str(x)
+            print(fmt % (line,col,text), file=sys.stderr)
+        else:
+            print(fmt,str(x), file=sys.stderr)
 
     def reportWarning(self,s):
         f = self.getFilename()
         if f:
-            print "%s:warning: %s" % (f,str(x))
-        else:
-            print "warning: %s" % (str(x))
+            print("%s:warning: %s" % (f,str(x)))
+        else:
+            print("warning: %s" % (str(x)))
 
     def rewind(self, pos) :
         self.inputState.input.rewind(pos)
@@ -1945,7 +1945,7 @@
         self.inputState.input = t
 
     def traceIndent(self):
-        print " " * self.traceDepth
+        print(" " * self.traceDepth)
 
     def traceIn(self,rname):
         self.traceDepth += 1
@@ -2034,20 +2034,20 @@
             self.k = 1
 
     def trace(self,ee,rname):
-        print type(self)
+        print(type(self))
         self.traceIndent()
         guess = ""
         if self.inputState.guessing > 0:
             guess = " [guessing]"
-        print(ee + rname + guess)
-        for i in xrange(1,self.k+1):
+        print((ee + rname + guess))
+        for i in range(1,self.k+1):
             if i != 1:
                 print(", ")
             if self.LT(i) :
                 v = self.LT(i).getText()
             else:
                 v = "null"
-            print "LA(%s) == %s" % (i,v)
+            print("LA(%s) == %s" % (i,v))
         print("\n")
 
     def traceIn(self,rname):
@@ -2108,10 +2108,10 @@
             raise MismatchedTokenException(getTokenNames(), t, ttype, True)
 
     def reportError(self,ex):
-        print >>sys.stderr,"error:",ex
+        print("error:",ex, file=sys.stderr)
 
     def  reportWarning(self, s):
-        print "warning:",s
+        print("warning:",s)
 
     def setASTFactory(self,f):
         self.astFactory = f
@@ -2123,20 +2123,20 @@
         self.astFactory.setASTNodeType(nodeType)
 
     def traceIndent(self):
-        print " " * self.traceDepth
+        print(" " * self.traceDepth)
 
     def traceIn(self,rname,t):
         self.traceDepth += 1
         self.traceIndent()
-        print("> " + rname + "(" +
+        print(("> " + rname + "(" +
               ifelse(t,str(t),"null") + ")" +
-              ifelse(self.inputState.guessing>0,"[guessing]",""))
+              ifelse(self.inputState.guessing>0,"[guessing]","")))
 
     def traceOut(self,rname,t):
         self.traceIndent()
-        print("< " + rname + "(" +
+        print(("< " + rname + "(" +
               ifelse(t,str(t),"null") + ")" +
-              ifelse(self.inputState.guessing>0,"[guessing]",""))
+              ifelse(self.inputState.guessing>0,"[guessing]","")))
         self.traceDepth -= 1
 
     ### wh: moved from ASTFactory to TreeParser
@@ -2683,7 +2683,7 @@
 
     def error(self, e):
         import sys
-        print >> sys.stderr, e
+        print(e, file=sys.stderr)
 
     def setTokenTypeASTNodeType(self, tokenType, className):
         """
@@ -2770,7 +2770,7 @@
     if not nodes:
         return None
 
-    for i in xrange(0,len(nodes)):
+    for i in range(0,len(nodes)):
         node = nodes[i]
         if node:
             assert isinstance(node,AST)
@@ -2780,7 +2780,7 @@
     if root:
         root.setFirstChild(None)
 
-    for i in xrange(1,len(nodes)):
+    for i in range(1,len(nodes)):
         if not nodes[i]:
             continue
         if not root:
--- ./src/ptgen/gcc/mainc.py	(original)
+++ ./src/ptgen/gcc/mainc.py	(refactored)
@@ -43,7 +43,7 @@
 import YaccParser,YaccLexer
 
 if len(sys.argv) != 2:
-    print >> sys.stderr, "usage %s grammar"%sys.argv[0]
+    print("usage %s grammar"%sys.argv[0], file=sys.stderr)
     sys.exit(1)
 
 
@@ -55,7 +55,7 @@
 
 outg= open('pt_'+sys.argv[1],'w')
 
-print >> outg, """
+print("""
 %pure-parser
 
 %{
@@ -75,21 +75,21 @@
 Tree *root;
 %}
 
-"""
+""", file=outg)
 
 for nt in y.NonTerminals:
-    print >> outg, '%type <t>', nt
+    print('%type <t>', nt, file=outg)
 
 
 header= open(sys.argv[1]+'.head','r')
 outg.write( header.read() )
 header.close()
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 name2id= {}
 current= 0
@@ -107,9 +107,9 @@
 
 
 for rule in y.Rules:
-    print >> outg, rule[0], ':', 
+    print(rule[0], ':', end=' ', file=outg) 
     for production in rule[1]:
-        print >> outg, production[1],
+        print(production[1], end=' ', file=outg)
     """
     leave= False
     for production in rule[1]:
@@ -120,35 +120,34 @@
         print >> outg, ';\n'
         continue
     """
-    print >> outg, """
+    print("""
     {
-        $$= new NonTerminal(""", name2id[rule[0]], ");"
+        $$= new NonTerminal(""", name2id[rule[0]], ");", file=outg)
     nodelist= [ production[0] for production \
-                in zip(range(1,len(rule[1])+1),rule[1]) \
+                in zip(list(range(1,len(rule[1])+1)),rule[1]) \
                 if production[1][0]=="node"]
 
     for i in range(len(nodelist)):
-        print >> outg, "\n        $$->addChild($%d);"%nodelist[i]
-        print >> outg, "\n        $%d->parent= $$;"%nodelist[i]
+        print("\n        $$->addChild($%d);"%nodelist[i], file=outg)
+        print("\n        $%d->parent= $$;"%nodelist[i], file=outg)
         if i + 1 < len(nodelist):
-            print >> outg,\
-                       "\n        $%d->nextSibbling= $%d;"%\
-                       (nodelist[i],nodelist[i+1])
+            print("\n        $%d->nextSibbling= $%d;"%\
+                       (nodelist[i],nodelist[i+1]), file=outg)
     if rule[0]=="program":
-        print >> outg, "root= $$;"
-    print >> outg, """
+        print("root= $$;", file=outg)
+    print("""
     }
     ;
-"""
+""", file=outg)
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 footer= open(sys.argv[1]+'.foot','r')
-print >> outg, footer.read()
+print(footer.read(), file=outg)
 footer.close()
 
 
@@ -157,7 +156,7 @@
 
 head = open('head.cc','w')
 
-print >> head, """
+print("""
 #include <map>
 #include <string>
 
@@ -168,17 +167,17 @@
 
 void id_init()
 {
-"""
+""", file=head)
 for nt in y.NonTerminals:
     id= name2id[nt]
-    print >> head, 'name2id["%s"]= %d;'%(nt,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,nt)
+    print('name2id["%s"]= %d;'%(nt,id), file=head)
+    print('id2name[%d]= "%s";'%(id,nt), file=head)
 for t in y.Terminals:
     id= name2id[t]
-    print >> head, 'name2id["%s"]= %d;'%(t,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,t)
-print >> head, '}'
-print >> head
+    print('name2id["%s"]= %d;'%(t,id), file=head)
+    print('id2name[%d]= "%s";'%(id,t), file=head)
+print('}', file=head)
+print(file=head)
 
 head.close()
 
--- ./src/ptgen/java/mainj.py	(original)
+++ ./src/ptgen/java/mainj.py	(refactored)
@@ -43,7 +43,7 @@
 import YaccParser,YaccLexer
 
 if len(sys.argv) != 2:
-    print >> sys.stderr, "usage %s grammar"%sys.argv[0]
+    print("usage %s grammar"%sys.argv[0], file=sys.stderr)
     sys.exit(1)
 
 
@@ -55,7 +55,7 @@
 
 outg= open('pt_'+sys.argv[1],'w')
 
-print >> outg, """
+print("""
 %pure-parser
 
 %{
@@ -75,13 +75,13 @@
 Tree *root;
 %}
 
-"""
+""", file=outg)
 
 for nt in y.NonTerminals:
-    print >> outg, '%type <t>', nt
+    print('%type <t>', nt, file=outg)
 
 for t in y.Terminals:
-    print >> outg, '%type <t>', t
+    print('%type <t>', t, file=outg)
 
 
 
@@ -89,11 +89,11 @@
 outg.write( header.read() )
 header.close()
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 name2id= {}
 current= 0
@@ -111,9 +111,9 @@
 
 
 for rule in y.Rules:
-    print >> outg, rule[0], ':', 
+    print(rule[0], ':', end=' ', file=outg) 
     for production in rule[1]:
-        print >> outg, production[1],
+        print(production[1], end=' ', file=outg)
     """
     leave= False
     for production in rule[1]:
@@ -124,34 +124,33 @@
         print >> outg, ';\n'
         continue
     """
-    print >> outg, """
+    print("""
     {
-        $$= new NonTerminal(""", name2id[rule[0]], ");"
+        $$= new NonTerminal(""", name2id[rule[0]], ");", file=outg)
     nodelist= [ production[0] for production \
-                in zip(range(1,len(rule[1])+1),rule[1]) \
+                in zip(list(range(1,len(rule[1])+1)),rule[1]) \
                 if production[1][0]=="node"]
     for i in range(len(nodelist)):
-        print >> outg, "\n        $$->addChild($%d);"%nodelist[i]
-        print >> outg, "\n        $%d->parent= $$;"%nodelist[i]
+        print("\n        $$->addChild($%d);"%nodelist[i], file=outg)
+        print("\n        $%d->parent= $$;"%nodelist[i], file=outg)
         if i + 1 < len(nodelist):
-            print >> outg,\
-                       "\n        $%d->nextSibbling= $%d;"%\
-                       (nodelist[i],nodelist[i+1])
+            print("\n        $%d->nextSibbling= $%d;"%\
+                       (nodelist[i],nodelist[i+1]), file=outg)
     if rule[0]=="goal":
-        print >> outg, "root= $$;"
-    print >> outg, """
+        print("root= $$;", file=outg)
+    print("""
     }
     ;
-"""
+""", file=outg)
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 footer= open(sys.argv[1]+'.foot','r')
-print >> outg, footer.read()
+print(footer.read(), file=outg)
 footer.close()
 
 
@@ -160,7 +159,7 @@
 
 head = open('head.cc','w')
 
-print >> head, """
+print("""
 #include <map>
 #include <string>
 
@@ -171,17 +170,17 @@
 
 void id_init()
 {
-"""
+""", file=head)
 for nt in y.NonTerminals:
     id= name2id[nt]
-    print >> head, 'name2id["%s"]= %d;'%(nt,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,nt)
+    print('name2id["%s"]= %d;'%(nt,id), file=head)
+    print('id2name[%d]= "%s";'%(id,nt), file=head)
 for t in y.Terminals:
     id= name2id[t]
-    print >> head, 'name2id["%s"]= %d;'%(t,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,t)
-print >> head, '}'
-print >> head
+    print('name2id["%s"]= %d;'%(t,id), file=head)
+    print('id2name[%d]= "%s";'%(id,t), file=head)
+print('}', file=head)
+print(file=head)
 
 head.close()
 
--- ./src/ptgen/php5/mainphp.py	(original)
+++ ./src/ptgen/php5/mainphp.py	(refactored)
@@ -43,7 +43,7 @@
 import YaccParser,YaccLexer
 
 if len(sys.argv) != 2:
-    print >> sys.stderr, "usage %s grammar"%sys.argv[0]
+    print("usage %s grammar"%sys.argv[0], file=sys.stderr)
     sys.exit(1)
 
 
@@ -55,7 +55,7 @@
 
 outg= open('pt_'+sys.argv[1],'w')
 
-print >> outg, """
+print("""
 %pure-parser
 
 %{
@@ -75,13 +75,13 @@
 Tree *root;
 %}
 
-"""
+""", file=outg)
 
 for nt in y.NonTerminals:
-    print >> outg, '%type <t>', nt
+    print('%type <t>', nt, file=outg)
 
 for t in y.Terminals:
-    print >> outg, '%type <t>', t
+    print('%type <t>', t, file=outg)
 
 
 
@@ -89,11 +89,11 @@
 outg.write( header.read() )
 header.close()
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 name2id= {}
 current= 0
@@ -111,9 +111,9 @@
 
 
 for rule in y.Rules:
-    print >> outg, rule[0], ':', 
+    print(rule[0], ':', end=' ', file=outg) 
     for production in rule[1]:
-        print >> outg, production[1],
+        print(production[1], end=' ', file=outg)
     """
     leave= False
     for production in rule[1]:
@@ -124,34 +124,33 @@
         print >> outg, ';\n'
         continue
     """
-    print >> outg, """
+    print("""
     {
-        $$= new NonTerminal(""", name2id[rule[0]], ");"
+        $$= new NonTerminal(""", name2id[rule[0]], ");", file=outg)
     nodelist= [ production[0] for production \
-                in zip(range(1,len(rule[1])+1),rule[1]) \
+                in zip(list(range(1,len(rule[1])+1)),rule[1]) \
                 if production[1][0]=="node"]
     for i in range(len(nodelist)):
-        print >> outg, "\n        $$->addChild($%d);"%nodelist[i]
-        print >> outg, "\n        $%d->parent= $$;"%nodelist[i]
+        print("\n        $$->addChild($%d);"%nodelist[i], file=outg)
+        print("\n        $%d->parent= $$;"%nodelist[i], file=outg)
         if i + 1 < len(nodelist):
-            print >> outg,\
-                       "\n        $%d->nextSibbling= $%d;"%\
-                       (nodelist[i],nodelist[i+1])
+            print("\n        $%d->nextSibbling= $%d;"%\
+                       (nodelist[i],nodelist[i+1]), file=outg)
     if rule[0]=="start":
-        print >> outg, "root= $$;"
-    print >> outg, """
+        print("root= $$;", file=outg)
+    print("""
     }
     ;
-"""
+""", file=outg)
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 footer= open(sys.argv[1]+'.foot','r')
-print >> outg, footer.read()
+print(footer.read(), file=outg)
 footer.close()
 
 
@@ -160,7 +159,7 @@
 
 head = open('head.cc','w')
 
-print >> head, """
+print("""
 #include <map>
 #include <string>
 
@@ -171,17 +170,17 @@
 
 void id_init()
 {
-"""
+""", file=head)
 for nt in y.NonTerminals:
     id= name2id[nt]
-    print >> head, 'name2id["%s"]= %d;'%(nt,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,nt)
+    print('name2id["%s"]= %d;'%(nt,id), file=head)
+    print('id2name[%d]= "%s";'%(id,nt), file=head)
 for t in y.Terminals:
     id= name2id[t]
-    print >> head, 'name2id["%s"]= %d;'%(t,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,t)
-print >> head, '}'
-print >> head
+    print('name2id["%s"]= %d;'%(t,id), file=head)
+    print('id2name[%d]= "%s";'%(id,t), file=head)
+print('}', file=head)
+print(file=head)
 
 head.close()
 
--- ./src/ptgen/sol/mainsol.py	(original)
+++ ./src/ptgen/sol/mainsol.py	(refactored)
@@ -43,7 +43,7 @@
 import YaccParser,YaccLexer
 
 if len(sys.argv) != 2:
-    print >> sys.stderr, "usage %s grammar"%sys.argv[0]
+    print("usage %s grammar"%sys.argv[0], file=sys.stderr)
     sys.exit(1)
 
 
@@ -55,7 +55,7 @@
 
 outg= open('pt_'+sys.argv[1],'w')
 
-print >> outg, """
+print("""
 %pure-parser
 
 %{
@@ -75,21 +75,21 @@
 Tree *root;
 %}
 
-"""
+""", file=outg)
 
 for nt in y.NonTerminals:
-    print >> outg, '%type <t>', nt
+    print('%type <t>', nt, file=outg)
 
 
 header= open(sys.argv[1]+'.head','r')
 outg.write( header.read() )
 header.close()
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 name2id= {}
 current= 0
@@ -107,9 +107,9 @@
 
 
 for rule in y.Rules:
-    print >> outg, rule[0], ':', 
+    print(rule[0], ':', end=' ', file=outg) 
     for production in rule[1]:
-        print >> outg, production[1],
+        print(production[1], end=' ', file=outg)
     """
     leave= False
     for production in rule[1]:
@@ -120,35 +120,34 @@
         print >> outg, ';\n'
         continue
     """
-    print >> outg, """
+    print("""
     {
-        $$= new NonTerminal(""", name2id[rule[0]], ");"
+        $$= new NonTerminal(""", name2id[rule[0]], ");", file=outg)
     nodelist= [ production[0] for production \
-                in zip(range(1,len(rule[1])+1),rule[1]) \
+                in zip(list(range(1,len(rule[1])+1)),rule[1]) \
                 if production[1][0]=="node"]
 
     for i in range(len(nodelist)):
-        print >> outg, "\n        $$->addChild($%d);"%nodelist[i]
-        print >> outg, "\n        $%d->parent= $$;"%nodelist[i]
+        print("\n        $$->addChild($%d);"%nodelist[i], file=outg)
+        print("\n        $%d->parent= $$;"%nodelist[i], file=outg)
         if i + 1 < len(nodelist):
-            print >> outg,\
-                       "\n        $%d->nextSibbling= $%d;"%\
-                       (nodelist[i],nodelist[i+1])
+            print("\n        $%d->nextSibbling= $%d;"%\
+                       (nodelist[i],nodelist[i+1]), file=outg)
     if rule[0]=="sourceUnit":
-        print >> outg, "\n        root= $$;"
-    print >> outg, """
+        print("\n        root= $$;", file=outg)
+    print("""
     }
     ;
-"""
+""", file=outg)
 
-print >> outg, """
+print("""
 
 %%
 
-"""
+""", file=outg)
 
 footer= open(sys.argv[1]+'.foot','r')
-print >> outg, footer.read()
+print(footer.read(), file=outg)
 footer.close()
 
 
@@ -157,7 +156,7 @@
 
 head = open('head.cc','w')
 
-print >> head, """
+print("""
 #include <map>
 #include <string>
 
@@ -168,17 +167,17 @@
 
 void id_init()
 {
-"""
+""", file=head)
 for nt in y.NonTerminals:
     id= name2id[nt]
-    print >> head, 'name2id["%s"]= %d;'%(nt,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,nt)
+    print('name2id["%s"]= %d;'%(nt,id), file=head)
+    print('id2name[%d]= "%s";'%(id,nt), file=head)
 for t in y.Terminals:
     id= name2id[t]
-    print >> head, 'name2id["%s"]= %d;'%(t,id)
-    print >> head, 'id2name[%d]= "%s";'%(id,t)
-print >> head, '}'
-print >> head
+    print('name2id["%s"]= %d;'%(t,id), file=head)
+    print('id2name[%d]= "%s";'%(id,t), file=head)
+print('}', file=head)
+print(file=head)
 
 head.close()
 
